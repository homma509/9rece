# Infrastructure configure
service: nine-rece-infra

frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  region: ${env:REGION_NAME, "ap-northeast-1"}

custom:
  projectName: 9rece-${self:provider.stage}
  bucketName: ${self:custom.projectName}-post

resources:
  Resources:
    # DynamoDB
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: DataType
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: DataType
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # S3
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT

    # SNS
    EFFileTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.projectName}-EFFile
    SubscriptionPoint:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: { Fn::GetAtt: [EFFileQueue, Arn] }
        Protocol: "sqs"
        RawMessageDelivery: True
        Region:
          Ref: "AWS::Region"
        TopicArn:
          Ref: EFFileTopic
    EFFileTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "EFFileTopicPolicy-1"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sns:Publish"
              Resource:
                Ref: EFFileTopic
        Topics:
          - Ref: EFFileTopic

    # SQS
    EFFileQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.projectName}-EFFile
        MessageRetentionPeriod: 60
    QueuePolicyPoint:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: EFFileQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "EFFileQueuePolicy-1"
              Action:
                - "sqs:SendMessage"
              Effect: "Allow"
              Resource: { Fn::GetAtt: [EFFileQueue, Arn] }
              Principal:
                Service: "sns.amazonaws.com"
            - Sid: "EFFileQueuePolicy-2"
              Action:
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
              Effect: "Allow"
              Resource: { Fn::GetAtt: [EFFileQueue, Arn] }
              Principal:
                Service: "lambda.amazonaws.com"

    # Cognitoの設定
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.projectName}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          UnusedAccountValidityDays: 7
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: "認証コードは {####} です。"
        EmailVerificationSubject: "認証コード発行"
        MfaConfiguration: "OFF"
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.projectName}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        RefreshTokenValidity: 30
        GenerateSecret: false
        ReadAttributes:
          - "email"
          - "name"
        WriteAttributes:
          - "email"
          - "name"

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.projectName}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName: { Fn::GetAtt: [CognitoUserPool, ProviderName] }

    CognitoIdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated: { Fn::GetAtt: [CognitoAuthRole, Arn] }
          unauthenticated: { Fn::GetAtt: [CognitoUnAuthRole, Arn] }

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-CognitoAuth
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: ${self:custom.projectName}-CognitoAuth
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.bucketName}
                        - "/*"

    CognitoUnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-CognitoUnAuth
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: ${self:custom.projectName}-CognitoUnAuth
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

plugins:
  - serverless-dotenv-plugin
