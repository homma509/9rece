# Application configure

service: nine-rece-backend-in

frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: go1.x
  region: ${env:REGION_NAME, "ap-northeast-1"}

custom:
  projectName: 9rece-backend-${self:provider.stage}
  bucketName: ${self:custom.projectName}

resources:
  Resources:
    # DynamoDB
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: DataType
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: DataType
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # S3
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
                - POST
                - HEAD

    # SNS
    TopicPoint:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.projectName}-Point
    SubscriptionPoint:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: { Fn::GetAtt: [QueuePoint, Arn] }
        Protocol: "sqs"
        RawMessageDelivery: True
        Region:
          Ref: "AWS::Region"
        TopicArn:
          Ref: TopicPoint
    TopicPolicyPoint:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "TopicPolicyPoint-1"
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sns:Publish"
              Resource:
                Ref: TopicPoint
        Topics:
          - Ref: TopicPoint

    # SQS
    QueuePoint:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.projectName}-Point
        MessageRetentionPeriod: 60
    QueuePolicyPoint:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: QueuePoint
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "QueuePolicyPoint-1"
              Action:
                - "sqs:SendMessage"
              Effect: "Allow"
              Resource: { Fn::GetAtt: [QueuePoint, Arn] }
              Principal:
                Service: "sns.amazonaws.com"
            - Sid: "QueuePolicyPoint-2"
              Action:
                - "sqs:ReceiveMessage"
                - "sqs:DeleteMessage"
                - "sqs:GetQueueAttributes"
              Effect: "Allow"
              Resource: { Fn::GetAtt: [QueuePoint, Arn] }
              Principal:
                Service: "lambda.amazonaws.com"

    # LambdaRole:
    LambdaS3Role:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-LambdaS3Role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "s3.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-LambdaS3Policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - { Fn::GetAtt: [Table, Arn] }
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - { Fn::GetAtt: [Bucket, Arn] }
                        - "/*"
                # - Effect: "Allow"
                #   Action:
                #     - "sqs:ReceiveMessage"
                #     - "sqs:DeleteMessage"
                #     - "sqs:GetQueueAttributes"
                #   Resource:
                #     - { Fn::GetAtt: [QueueEFFile, Arn] }
                #     - { Fn::GetAtt: [QueueFacility, Arn] }
                - Effect: "Allow"
                  Action:
                    - "sns:Publish"
                  Resource:
                    - Ref: TopicPoint

    LambdaSQSRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-LambdaSQSRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-LambdaSQSPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - { Fn::GetAtt: [Table, Arn] }
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "sqs:ReceiveMessage"
                    - "sqs:DeleteMessage"
                    - "sqs:GetQueueAttributes"
                  Resource:
                    - { Fn::GetAtt: [QueuePoint, Arn] }

    # LambdaDynamodbRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: /
    #     RoleName: ${self:custom.projectName}-LambdaDynamodbRole
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: "Allow"
    #           Principal:
    #             Service:
    #               - "lambda.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRole"
    #     Policies:
    #       - PolicyName: ${self:custom.projectName}-LambdaDynamodbPolicy
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "lambda:InvokeFunction"
    #               Resource:
    #                 - "*"
    #             - Effect: "Allow"
    #               Action:
    #                 - "dynamodb:GetRecords"
    #                 - "dynamodb:GetShardIterator"
    #                 - "dynamodb:DescribeStream"
    #                 - "dynamodb:ListStreams"
    #               Resource:
    #                 - { Fn::GetAtt: [Table, StreamArn] }
    #             - Effect: "Allow"
    #               Action:
    #                 - "logs:CreateLogGroup"
    #                 - "logs:CreateLogStream"
    #                 - "logs:PutLogEvents"
    #               Resource:
    #                 "Fn::Join":
    #                     - ":"
    #                     - - "arn:aws:logs"
    #                       - Ref: "AWS::Region"
    #                       - Ref: "AWS::AccountId"
    #                       - "log-group:/aws/lambda/*:*:*"

plugins:
  - serverless-dotenv-plugin
  - serverless-appsync-plugin

package:
  exclude:
    - ./**
  include:
    - ./build/**

functions:
  post_effiles:
    name: ${self:custom.projectName}-post-effiles
    handler: build/post_effiles/main
    role: { Fn::GetAtt: [LambdaS3Role, Arn] }
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/effile/
            - suffix: .txt
          existing: true
  #   destinations:
  #     onSuccess: arn:aws:sns:ap-northeast-1:878068647223:${self:custom.projectName}-Point
  post_facilities:
    name: ${self:custom.projectName}-post-facilities
    handler: build/post_facilities/main
    role: { Fn::GetAtt: [LambdaS3Role, Arn] }
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/facility/
            - suffix: .txt
          existing: true
  # post_points:
  #   name: ${self:custom.projectName}-post-points
  #   handler: build/api/post_points/main
  #   role: { Fn::GetAtt: [LambdaSQSRole, Arn] }
  #   events:
  #     - sqs:
  #         arn: { Fn::GetAtt: [QueuePoint, Arn] }
  #   # existing: true
# sns:
#   name: ${self:custom.projectName}-sns
#   handler: build/sns/main
#   role: { Fn::GetAtt: [LambdaSNSRole, Arn] }
#   events:
#     - sns:
#         arn:
# Ref: Topic
#         topicName: ${self:custom.projectName}
# dynamodb:
#   name: ${self:custom.projectName}-dynamodb
#   handler: build/dynamodb/main
#   role: { Fn::GetAtt: [LambdaDynamodbRole, Arn] }
#   events:
#     - stream:
#         type: dynamodb
#         arn:
#           Fn::GetAtt: [Table, StreamArn]
