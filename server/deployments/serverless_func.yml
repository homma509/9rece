# Lambda functions configure
service: nine-rece-func

frameworkVersion: ">=1.28.0 <2.12.0"

provider:
  name: aws
  stage: ${opt:stage, "dev"}
  runtime: go1.x
  region: ${env:REGION_NAME, "ap-northeast-1"}

custom:
  projectName: 9rece-${self:provider.stage}
  clientBucketName: ${self:custom.projectName}-client
  serverBucketName: ${self:custom.projectName}-server

resources:
  Resources:
    # レセプトファイルのPut Functionのロール
    PutReceiptRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-put-receipt
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "s3.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-put-receipt
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: "Sid1"
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "*"
                - Sid: "Sid2"
                  Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:ListBucket"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.clientBucketName}
                        - "/*"
                - Sid: "Sid3"
                  Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.serverBucketName}
                        - "/*"

    # レセプトファイルのCopy Functionのロール
    CopyReceiptRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-copy-receipt
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "s3.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-copy-receipt
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Sid: "Sid1"
                  Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "*"
                - Sid: "Sid2"
                  Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:ListBucket"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.serverBucketName}
                        - "/*"
                - Sid: "Sid3"
                  Effect: "Allow"
                  Action:
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/${env:DYNAMO_TABLE_NAME}"

    # EFファイルのPOST Functionのロール
    PostEFFileRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-post-effile
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "s3.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-post-effile
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/${env:DYNAMO_TABLE_NAME}"
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "*"
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.clientBucketName}
                        - "/*"

    # 施設ファイルのPOST Functionのロール
    PostFacilityRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.projectName}-post-facility
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "s3.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.projectName}-post-facility
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:DeleteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - Fn::Join:
                        - ":"
                        - - "arn:aws:dynamodb"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "table/${env:DYNAMO_TABLE_NAME}"
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    Fn::Join:
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "*"
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - ${self:custom.clientBucketName}
                        - "/*"

plugins:
  - serverless-dotenv-plugin

package:
  exclude:
    - ./**
  include:
    - ./build/**

functions:
  # レセプトファイルのPut Function
  PutReceiptFunc:
    name: ${self:custom.projectName}-put-receipt
    handler: build/s3/put_receipt/main
    role: { Fn::GetAtt: [PutReceiptRole, Arn] }
    maximumRetryAttempts: 0
    events:
      - s3:
          bucket: ${self:custom.clientBucketName}
          event: s3:ObjectCreated:Put
          rules:
            - prefix: private/
            - suffix: .UKE
          existing: true

  # レセプトファイルのCopy Function
  CopyReceiptFunc:
    name: ${self:custom.projectName}-copy-receipt
    handler: build/s3/copy_receipt/main
    role: { Fn::GetAtt: [CopyReceiptRole, Arn] }
    maximumRetryAttempts: 0
    timeout: 600
    events:
      - s3:
          bucket: ${self:custom.serverBucketName}
          event: s3:ObjectCreated:Copy
          rules:
            - prefix: receipts/
            - suffix: .UKE
          existing: true

  # EFファイルのPOST Function
  PostEFFileFunc:
    name: ${self:custom.projectName}-post-effile
    handler: build/post_effile/main
    role: { Fn::GetAtt: [PostEFFileRole, Arn] }
    maximumRetryAttempts: 0
    events:
      - s3:
          bucket: ${self:custom.clientBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/effile/
            - suffix: .txt
          existing: true

  # 施設ファイルのPOST Function
  PostFacilityFunc:
    name: ${self:custom.projectName}-post-facility
    handler: build/post_facility/main
    role: { Fn::GetAtt: [PostFacilityRole, Arn] }
    maximumRetryAttempts: 0
    events:
      - s3:
          bucket: ${self:custom.clientBucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/facility/
            - suffix: .txt
          existing: true
